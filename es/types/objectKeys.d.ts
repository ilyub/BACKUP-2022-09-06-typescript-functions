import type { FilterKeys } from "ts-toolbelt/out/Object/FilterKeys";
import type { OptionalKeys } from "ts-toolbelt/out/Object/OptionalKeys";
import type { ReadonlyKeys } from "ts-toolbelt/out/Object/ReadonlyKeys";
import type { RequiredKeys } from "ts-toolbelt/out/Object/RequiredKeys";
import type { WritableKeys } from "ts-toolbelt/out/Object/WritableKeys";
export declare type DefinedKeys<T extends object> = ObjectKeys<T, "defined", never>;
export declare type ObjectKeys<T extends object, I extends ObjectKeysOption, E extends ObjectKeysOption> = Exclude<ObjectKeysDefined<T, I, keyof T> & ObjectKeysOptional<T, I, keyof T> & ObjectKeysReadonly<T, I, keyof T> & ObjectKeysRequired<T, I, keyof T> & ObjectKeysUndefined<T, I, keyof T> & ObjectKeysWritable<T, I, keyof T> & PropertyKey & keyof T, ObjectKeysDefined<T, E, never> | ObjectKeysOptional<T, E, never> | ObjectKeysReadonly<T, E, never> | ObjectKeysRequired<T, E, never> | ObjectKeysUndefined<T, E, never> | ObjectKeysWritable<T, E, never>>;
export declare type ObjectKeysDefined<T extends object, C extends ObjectKeysOption, D extends keyof T> = "defined" extends C ? FilterKeys<T, undefined, "<-extends"> : D;
export declare type ObjectKeysOption = "defined" | "optional" | "readonly" | "required" | "undefined" | "writable";
export declare type ObjectKeysOptional<T extends object, C extends ObjectKeysOption, D extends keyof T> = "optional" extends C ? OptionalKeys<T> : D;
export declare type ObjectKeysReadonly<T extends object, C extends ObjectKeysOption, D extends keyof T> = "readonly" extends C ? ReadonlyKeys<T> : D;
export declare type ObjectKeysRequired<T extends object, C extends ObjectKeysOption, D extends keyof T> = "required" extends C ? RequiredKeys<T> : D;
export declare type ObjectKeysUndefined<T extends object, C extends ObjectKeysOption, D extends keyof T> = "undefined" extends C ? Exclude<keyof T, FilterKeys<T, undefined, "<-extends">> : D;
export declare type ObjectKeysWritable<T extends object, C extends ObjectKeysOption, D extends keyof T> = "writable" extends C ? WritableKeys<T> : D;
export declare type ReadonlyDefinedKeys<T extends object> = ObjectKeys<T, "defined" | "readonly", never>;
export declare type ReadonlyUndefinedKeys<T extends object> = ObjectKeys<T, "readonly" | "undefined", never>;
export declare type UndefinedKeys<T extends object> = ObjectKeys<T, "undefined", never>;
export declare type WritableDefindKeys<T extends object> = ObjectKeys<T, "defined" | "writable", never>;
export declare type WritableUndefindKeys<T extends object> = ObjectKeys<T, "undefined" | "writable", never>;
//# sourceMappingURL=objectKeys.d.ts.map